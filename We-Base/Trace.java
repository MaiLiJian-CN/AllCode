package com.yichen;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint8;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple6;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Trace extends Contract {
    public static final String[] BINARY_ARRAY = {"60806040523480156200001157600080fd5b5060405160608062003ed483398101806040526200003391908101906200036f565b808284620000508162000090640100000000026401000000009004565b506200006b81620000fa640100000000026401000000009004565b50620000868162000164640100000000026401000000009004565b50505050620004bd565b620000b4816000620001ce64010000000002620010b8179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f2977383b0207d39ef14220620b6cf3e6c9b6e78592af90baeef6614ed2fcd2c660405160405180910390a250565b6200011e816001620001ce64010000000002620010b8179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167fddbf200aa634dc3fb81cfd68583dd1040d1c751d335e1d86b631bde3e977fea860405160405180910390a250565b62000188816002620001ce64010000000002620010b8179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f71ae26cad02663e3d92efd6ec56031a80d74a20c0ab4183faa8bf262261c9baa60405160405180910390a250565b620001e982826200028c640100000000026401000000009004565b1515156200022e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002259062000459565b60405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151562000302576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002f9906200047b565b60405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006200036782516200049d565b905092915050565b6000806000606084860312156200038557600080fd5b6000620003958682870162000359565b9350506020620003a88682870162000359565b9250506040620003bb8682870162000359565b9150509250925092565b6000601f82527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006020830152604082019050919050565b6000602282527f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560208301527f73730000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600060208201905081810360008301526200047481620003c5565b9050919050565b600060208201905081810360008301526200049681620003fc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b613a0780620004cd6000396000f300608060405260043610620000eb576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631e4de87214620000f05780631e81c3ad14620001395780634a68b844146200018057806351d17e0014620001c45780635da09b881462000208578063644241db146200024c5780636ef9f5d714620002665780637250e22414620002965780638ec4f50514620002c45780638f0c86fa14620002f2578063a2d12a391462000336578063db0e6a2f146200037a578063ddf801661462000394578063f552102214620003c2578063f9b867d81462000406575b600080fd5b348015620000fd57600080fd5b506200011c60048036036200011691908101906200171e565b62000420565b604051620001309695949392919062001f6a565b60405180910390f35b3480156200014657600080fd5b506200016560048036036200015f91908101906200171e565b62000517565b60405162000177949392919062001d57565b60405180910390f35b3480156200018d57600080fd5b50620001ac6004803603620001a6919081019062001680565b62000604565b604051620001bb919062001d16565b60405180910390f35b348015620001d157600080fd5b50620001f06004803603620001ea91908101906200182b565b620007c4565b604051620001ff919062001dc0565b60405180910390f35b3480156200021557600080fd5b506200023460048036036200022e919081019062001558565b620009aa565b60405162000243919062001dc0565b60405180910390f35b3480156200025957600080fd5b5062000264620009c9565b005b3480156200027357600080fd5b506200027e620009d6565b6040516200028d919062001d33565b60405180910390f35b348015620002a357600080fd5b50620002c26004803603620002bc919081019062001558565b62000a30565b005b348015620002d157600080fd5b50620002f06004803603620002ea919081019062001558565b62000a8d565b005b348015620002ff57600080fd5b506200031e600480360362000318919081019062001558565b62000ab2565b6040516200032d919062001dc0565b60405180910390f35b3480156200034357600080fd5b506200036260048036036200035c91908101906200182b565b62000ad1565b60405162000371919062001dc0565b60405180910390f35b3480156200038757600080fd5b506200039262000c7f565b005b348015620003a157600080fd5b50620003c06004803603620003ba919081019062001558565b62000c8c565b005b348015620003cf57600080fd5b50620003ee6004803603620003e8919081019062001558565b62000ce9565b604051620003fd919062001dc0565b60405180910390f35b3480156200041357600080fd5b506200041e62000d08565b005b600060608060606000806003600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ecc9806040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015620004c257600080fd5b505af1158015620004d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506200050291908101906200174a565b95509550955095509550955091939550919395565b6060806060806003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f0d984e46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015620005b557600080fd5b505af1158015620005ca573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250620005f5919081019062001584565b93509350935093509193509193565b600080620006123362000ce9565b151562000656576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200064d9062001e9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515620006fd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006f49062001f48565b60405180910390fd5b858484336200070b62001167565b6200071a949392919062001e21565b604051809103906000f08015801562000737573d6000803e3d6000fd5b509050806003600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600485908060018154018082558091505090600182039060005260206000200160009091929091909150555080915050949350505050565b6000620007d13362000ab2565b151562000815576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200080c9062001ee2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515620008bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008b49062001ec0565b60405180910390fd5b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306e729678433856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200094b9392919062001ddd565b602060405180830381600087803b1580156200096657600080fd5b505af11580156200097b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620009a1919081019062001654565b90509392505050565b6000620009c282600262000d1590919063ffffffff16565b9050919050565b620009d43362000de2565b565b6060600480548060200260200160405190810160405280929190818152602001828054801562000a2657602002820191906000526020600020905b81548152602001906001019080831162000a11575b5050505050905090565b62000a3b3362000ab2565b151562000a7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a769062001ee2565b60405180910390fd5b62000a8a8162000e3e565b50565b62000a9833620009aa565b151562000aa457600080fd5b62000aaf8162000e9a565b50565b600062000aca82600162000d1590919063ffffffff16565b9050919050565b600062000ade33620009aa565b151562000aea57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffff","","","6020600020905b8154815260200190600101908083116103ef575b5050505050935082805480602002602001604051908101604052809291908181526020016000905b828210156104e7578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104d35780601f106104a8576101008083540402835291602001916104d3565b820191906000526020600020905b8154815290600101906020018083116104b657829003601f168201915b50505050508152602001906001019061042b565b5050505092508180548060200260200160405190810160405280929190818152602001828054801561056e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610524575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156105e657602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116105af5790505b50505050509050935093509350935090919293565b6000606080606060008060008081548110151561061457fe5b90600052602060002001546001600081548110151561062f57fe5b90600052602060002001600460056002600081548110151561064d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900460ff16848054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107b95780601f1061078e576101008083540402835291602001916107b9565b820191906000526020600020905b81548152906001019060200180831161079c57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108555780601f1061082a57610100808354040283529160200191610855565b820191906000526020600020905b81548152906001019060200180831161083857829003601f168201915b50505050509250955095509550955095509550909192939495565b60006001600660019054906101000a900460ff1660ff161415156108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090610fee565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561095b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095290610fae565b60405180910390fd5b600042908060018154018082558091505090600182039060005260206000200160009091929091909150555060018490806001815401808255809150509060018203906000526020600020016000909192909190915090805190602001906109c4929190610adc565b505083600590805190602001906109dc929190610adc565b5060028390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600660006101000a81548160ff021916908360ff1602179055506003600660009054906101000a900460ff16908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360ff160217905550506002600660016101000a81548160ff021916908360ff160217905550600190509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b1d57805160ff1916838001178555610b4b565b82800160010185558215610b4b579182015b82811115610b4a578251825591602001919060010190610b2f565b5b509050610b589190610b5c565b5090565b610b7e91905b80821115610b7a576000816000905550600101610b62565b5090565b90565b6000610b8d82356111ca565b905092915050565b600082601f8301121515610ba857600080fd5b8135610bbb610bb6826110b1565b611084565b91508082526020830160208301858383011115610bd757600080fd5b610be28382846111f7565b50505092915050565b6000610bf782356111ea565b905092915050565b600080600060608486031215610c1457600080fd5b600084013567ffffffffffffffff811115610c2e57600080fd5b610c3a86828701610b95565b9350506020610c4b86828701610b81565b9250506040610c5c86828701610beb565b9150509250925092565b610c6f81611187565b82525050565b6000610c8082611111565b808452602084019350610c92836110dd565b60005b82811015610cc457610ca8868351610c66565b610cb182611153565b9150602086019550600181019050610c95565b50849250505092915050565b6000610cdb8261111c565b80845260208401935083602082028501610cf4856110ea565b60005b84811015610d2d578383038852610d0f838351610e39565b9250610d1a82611160565b9150602088019750600181019050610cf7565b508196508694505050505092915050565b6000610d4982611127565b808452602084019350610d5b836110f7565b60005b82811015610d8d57610d71868351610f14565b610d7a8261116d565b9150602086019550600181019050610d5e565b50849250505092915050565b6000610da482611132565b808452602084019350610db683611104565b60005b82811015610de857610dcc868351610f23565b610dd58261117a565b9150602086019550600181019050610db9565b50849250505092915050565b610dfd816111a7565b82525050565b6000610e0e82611148565b808452610e22816020860160208601611206565b610e2b81611239565b602085010191505092915050565b6000610e448261113d565b808452610e58816020860160208601611206565b610e6181611239565b602085010191505092915050565b6000601e82527f6f6e6c7920747261636520636f6e74726163742063616e20696e766f6b6500006020830152604082019050919050565b6000601882527f737461747573206d7573742062652070726f647563696e6700000000000000006020830152604082019050919050565b6000601a82527f737461747573206d757374206265206469737472696275746f720000000000006020830152604082019050919050565b610f1d816111b3565b82525050565b610f2c816111bd565b82525050565b60006080820190508181036000830152610f4c8187610d3e565b90508181036020830152610f608186610cd0565b90508181036040830152610f748185610c75565b90508181036060830152610f888184610d99565b905095945050505050565b6000602082019050610fa86000830184610df4565b92915050565b60006020820190508181036000830152610fc781610e6f565b9050919050565b60006020820190508181036000830152610fe781610ea6565b9050919050565b6000602082019050818103600083015261100781610edd565b9050919050565b600060c0820190506110236000830189610f14565b81810360208301526110358188610e03565b905081810360408301526110498187610e03565b9050818103606083015261105d8186610e03565b905061106c6080830185610c66565b61107960a0830184610f23565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156110a757600080fd5b8060405250919050565b600067ffffffffffffffff8211156110c857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611224578082015181840152602081019050611209565b83811115611233576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582072c5513fbf9b68d1c47bfc41c1a9f0aee10da32ab6e8b674c32654fcad086b826c6578706572696d656e74616cf50037a265627a7a7230582014c89e2f9275f31a46bba6f3b5b17487fa345c46726aa64d7d92b80d0a477dbe6c6578706572696d656e74616cf50037"};

    public static final String BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"60806040523480156200001157600080fd5b5060405160608062003ed483398101806040526200003391908101906200036f565b808284620000508162000090640100000000026401000000009004565b506200006b81620000fa640100000000026401000000009004565b50620000868162000164640100000000026401000000009004565b50505050620004bd565b620000b4816000620001ce64010000000002620010b8179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f2977383b0207d39ef14220620b6cf3e6c9b6e78592af90baeef6614ed2fcd2c660405160405180910390a250565b6200011e816001620001ce64010000000002620010b8179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167fddbf200aa634dc3fb81cfd68583dd1040d1c751d335e1d86b631bde3e977fea860405160405180910390a250565b62000188816002620001ce64010000000002620010b8179091906401000000009004565b8073ffffffffffffffffffffffffffffffffffffffff167f71ae26cad02663e3d92efd6ec56031a80d74a20c0ab4183faa8bf262261c9baa60405160405180910390a250565b620001e982826200028c640100000000026401000000009004565b1515156200022e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002259062000459565b60405180910390fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151562000302576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002f9906200047b565b60405180910390fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006200036782516200049d565b905092915050565b6000806000606084860312156200038557600080fd5b6000620003958682870162000359565b9350506020620003a88682870162000359565b9250506040620003bb8682870162000359565b9150509250925092565b6000601f82527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006020830152604082019050919050565b6000602282527f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560208301527f73730000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b600060208201905081810360008301526200047481620003c5565b9050919050565b600060208201905081810360008301526200049681620003fc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b613a0780620004cd6000396000f300608060405260043610620000eb576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631e4de87214620000f05780631e81c3ad14620001395780634a68b844146200018057806351d17e0014620001c45780635da09b881462000208578063644241db146200024c5780636ef9f5d714620002665780637250e22414620002965780638ec4f50514620002c45780638f0c86fa14620002f2578063a2d12a391462000336578063db0e6a2f146200037a578063ddf801661462000394578063f552102214620003c2578063f9b867d81462000406575b600080fd5b348015620000fd57600080fd5b506200011c60048036036200011691908101906200171e565b62000420565b604051620001309695949392919062001f6a565b60405180910390f35b3480156200014657600080fd5b506200016560048036036200015f91908101906200171e565b62000517565b60405162000177949392919062001d57565b60405180910390f35b3480156200018d57600080fd5b50620001ac6004803603620001a6919081019062001680565b62000604565b604051620001bb919062001d16565b60405180910390f35b348015620001d157600080fd5b50620001f06004803603620001ea91908101906200182b565b620007c4565b604051620001ff919062001dc0565b60405180910390f35b3480156200021557600080fd5b506200023460048036036200022e919081019062001558565b620009aa565b60405162000243919062001dc0565b60405180910390f35b3480156200025957600080fd5b5062000264620009c9565b005b3480156200027357600080fd5b506200027e620009d6565b6040516200028d919062001d33565b60405180910390f35b348015620002a357600080fd5b50620002c26004803603620002bc919081019062001558565b62000a30565b005b348015620002d157600080fd5b50620002f06004803603620002ea919081019062001558565b62000a8d565b005b348015620002ff57600080fd5b506200031e600480360362000318919081019062001558565b62000ab2565b6040516200032d919062001dc0565b60405180910390f35b3480156200034357600080fd5b506200036260048036036200035c91908101906200182b565b62000ad1565b60405162000371919062001dc0565b60405180910390f35b3480156200038757600080fd5b506200039262000c7f565b005b348015620003a157600080fd5b50620003c06004803603620003ba919081019062001558565b62000c8c565b005b348015620003cf57600080fd5b50620003ee6004803603620003e8919081019062001558565b62000ce9565b604051620003fd919062001dc0565b60405180910390f35b3480156200041357600080fd5b506200041e62000d08565b005b600060608060606000806003600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f5ecc9806040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015620004c257600080fd5b505af1158015620004d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506200050291908101906200174a565b95509550955095509550955091939550919395565b6060806060806003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f0d984e46040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b158015620005b557600080fd5b505af1158015620005ca573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250620005f5919081019062001584565b93509350935093509193509193565b600080620006123362000ce9565b151562000656576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200064d9062001e9e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515620006fd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006f49062001f48565b60405180910390fd5b858484336200070b62001167565b6200071a949392919062001e21565b604051809103906000f08015801562000737573d6000803e3d6000fd5b509050806003600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600485908060018154018082558091505090600182039060005260206000200160009091929091909150555080915050949350505050565b6000620007d13362000ab2565b151562000815576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200080c9062001ee2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515620008bd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620008b49062001ec0565b60405180910390fd5b6003600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306e729678433856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016200094b9392919062001ddd565b602060405180830381600087803b1580156200096657600080fd5b505af11580156200097b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250620009a1919081019062001654565b90509392505050565b6000620009c282600262000d1590919063ffffffff16565b9050919050565b620009d43362000de2565b565b6060600480548060200260200160405190810160405280929190818152602001828054801562000a2657602002820191906000526020600020905b81548152602001906001019080831162000a11575b5050505050905090565b62000a3b3362000ab2565b151562000a7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a769062001ee2565b60405180910390fd5b62000a8a8162000e3e565b50565b62000a9833620009aa565b151562000aa457600080fd5b62000aaf8162000e9a565b50565b600062000aca82600162000d1590919063ffffffff16565b9050919050565b600062000ade33620009aa565b151562000aea57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffff","","206e6f7420686160208301527f7665207468652050726f647563657220726f6c650000000000000000000000006040830152606082019050919050565b6000601a82527f74726163654e756d62657220646f6573206e6f742065786973740000000000006020830152604082019050919050565b6000603a82527f4469737472696275746f72526f6c653a2063616c6c657220646f6573206e6f7460208301527f206861766520746865204469737472696275746f7220726f6c650000000000006040830152606082019050919050565b6000602182527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c60208301527f65000000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602282527f526f6c65733a206163636f756e7420697320746865207a65726f20616464726560208301527f73730000000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601982527f74726163654e756d62657220616c7265616479206578697374000000000000006020830152604082019050919050565b62001cff81620021ee565b82525050565b62001d1081620021f8565b82525050565b600060208201905062001d2d60008301846200189a565b92915050565b6000602082019050818103600083015262001d4f818462001988565b905092915050565b6000608082019050818103600083015262001d73818762001988565b9050818103602083015262001d89818662001910565b9050818103604083015262001d9f8185620018ab565b9050818103606083015262001db58184620019ed565b905095945050505050565b600060208201905062001dd7600083018462001a52565b92915050565b6000606082019050818103600083015262001df9818662001a63565b905062001e0a60208301856200189a565b62001e19604083018462001d05565b949350505050565b6000608082019050818103600083015262001e3d818762001a63565b9050818103602083015262001e53818662001a63565b905062001e64604083018562001d05565b62001e7360608301846200189a565b95945050505050565b6000602082019050818103600083015262001e978162001adb565b9050919050565b6000602082019050818103600083015262001eb98162001b12565b9050919050565b6000602082019050818103600083015262001edb8162001b6f565b9050919050565b6000602082019050818103600083015262001efd8162001ba6565b9050919050565b6000602082019050818103600083015262001f1f8162001c03565b9050919050565b6000602082019050818103600083015262001f418162001c60565b9050919050565b6000602082019050818103600083015262001f638162001cbd565b9050919050565b600060c08201905062001f81600083018962001cf4565b818103602083015262001f95818862001a63565b9050818103604083015262001fab818762001a63565b9050818103606083015262001fc1818662001a63565b905062001fd260808301856200189a565b62001fe160a083018462001d05565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156200201057600080fd5b8060405250919050565b600067ffffffffffffffff8211156200203257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156200205b57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156200208457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115620020ad57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115620020d657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156200210357600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015620022775780820151818401526020810190506200225a565b8381111562002287576000848401525b50505050565b6000601f19601f8301169050919050560060806040523480156200001157600080fd5b506040516200172f3803806200172f83398101806040526200003791908101906200033f565b60004290806001815401808255809150509060018203906000526020600020016000909192909190915055506001839080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190620000a292919062000206565b505060028190806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050600382908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360ff1602179055505083600490805190602001906200016a92919062000206565b5082600590805190602001906200018392919062000206565b5081600660006101000a81548160ff021916908360ff1602179055506000600660016101000a81548160ff021916908360ff16021790555033600660026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050506200049b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024957805160ff19168380011785556200027a565b828001600101855582156200027a579182015b82811115620002795782518255916020019190600101906200025c565b5b5090506200028991906200028d565b5090565b620002b291905b80821115620002ae57600081600090555060010162000294565b5090565b90565b6000620002c3825162000438565b905092915050565b600082601f8301121515620002df57600080fd5b8151620002f6620002f0826200040b565b620003dd565b915080825260208301602083018583830111156200031357600080fd5b6200032083828462000465565b50505092915050565b600062000337825162000458565b905092915050565b600080600080608085870312156200035657600080fd5b600085015167ffffffffffffffff8111156200037157600080fd5b6200037f87828801620002cb565b945050602085015167ffffffffffffffff8111156200039d57600080fd5b620003ab87828801620002cb565b9350506040620003be8782880162000329565b9250506060620003d187828801620002b5565b91505092959194509250565b6000604051905081810181811067ffffffffffffffff821117156200040157600080fd5b8060405250919050565b600067ffffffffffffffff8211156200042357600080fd5b601f19601f8301169050602081019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b60005b838110156200048557808201518184015260208101905062000468565b8381111562000495576000848401525b50505050565b61128480620004ab6000396000f300608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306e7296714610067578063f0d984e4146100a4578063f5ecc980146100d2578063f650350d14610102575b600080fd5b34801561007357600080fd5b5061008e60048036036100899190810190610bff565b61013f565b60405161009b9190610f93565b60405180910390f35b3480156100b057600080fd5b506100b96103aa565b6040516100c99493929190610f32565b60405180910390f35b3480156100de57600080fd5b506100e76105fb565b6040516100f99695949392919061100e565b60405180910390f35b34801561010e57600080fd5b5061012960048036036101249190810190610bff565b610870565b6040516101369190610f93565b60405180910390f35b600080600660019054906101000a900460ff1660ff16141515610197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018e90610fce565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610fae565b60405180910390fd5b60004290806001815401808255809150509060018203906000526020600020016000909192909190915055506001849080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610292929190610adc565b505083600590805190602001906102aa929190610adc565b5060028390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600660006101000a81548160ff021916908360ff1602179055506003600660009054906101000a900460ff16908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360ff160217905550506001600660016101000a81548160ff021916908360ff160217905550600190509392505050565b6060806060806000600160026003838054806020026020016040519081016040528092919081815260200182805480156104035760200282019190600052","6020600020905b8154815260200190600101908083116103ef575b5050505050935082805480602002602001604051908101604052809291908181526020016000905b828210156104e7578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104d35780601f106104a8576101008083540402835291602001916104d3565b820191906000526020600020905b8154815290600101906020018083116104b657829003601f168201915b50505050508152602001906001019061042b565b5050505092508180548060200260200160405190810160405280929190818152602001828054801561056e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610524575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156105e657602002820191906000526020600020906000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116105af5790505b50505050509050935093509350935090919293565b6000606080606060008060008081548110151561061457fe5b90600052602060002001546001600081548110151561062f57fe5b90600052602060002001600460056002600081548110151561064d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900460ff16848054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561071d5780601f106106f25761010080835404028352916020019161071d565b820191906000526020600020905b81548152906001019060200180831161070057829003601f168201915b50505050509450838054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107b95780601f1061078e576101008083540402835291602001916107b9565b820191906000526020600020905b81548152906001019060200180831161079c57829003601f168201915b50505050509350828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156108555780601f1061082a57610100808354040283529160200191610855565b820191906000526020600020905b81548152906001019060200180831161083857829003601f168201915b50505050509250955095509550955095509550909192939495565b60006001600660019054906101000a900460ff1660ff161415156108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090610fee565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600660029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561095b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095290610fae565b60405180910390fd5b600042908060018154018082558091505090600182039060005260206000200160009091929091909150555060018490806001815401808255809150509060018203906000526020600020016000909192909190915090805190602001906109c4929190610adc565b505083600590805190602001906109dc929190610adc565b5060028390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505081600660006101000a81548160ff021916908360ff1602179055506003600660009054906101000a900460ff16908060018154018082558091505090600182039060005260206000209060209182820401919006909192909190916101000a81548160ff021916908360ff160217905550506002600660016101000a81548160ff021916908360ff160217905550600190509392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610b1d57805160ff1916838001178555610b4b565b82800160010185558215610b4b579182015b82811115610b4a578251825591602001919060010190610b2f565b5b509050610b589190610b5c565b5090565b610b7e91905b80821115610b7a576000816000905550600101610b62565b5090565b90565b6000610b8d82356111ca565b905092915050565b600082601f8301121515610ba857600080fd5b8135610bbb610bb6826110b1565b611084565b91508082526020830160208301858383011115610bd757600080fd5b610be28382846111f7565b50505092915050565b6000610bf782356111ea565b905092915050565b600080600060608486031215610c1457600080fd5b600084013567ffffffffffffffff811115610c2e57600080fd5b610c3a86828701610b95565b9350506020610c4b86828701610b81565b9250506040610c5c86828701610beb565b9150509250925092565b610c6f81611187565b82525050565b6000610c8082611111565b808452602084019350610c92836110dd565b60005b82811015610cc457610ca8868351610c66565b610cb182611153565b9150602086019550600181019050610c95565b50849250505092915050565b6000610cdb8261111c565b80845260208401935083602082028501610cf4856110ea565b60005b84811015610d2d578383038852610d0f838351610e39565b9250610d1a82611160565b9150602088019750600181019050610cf7565b508196508694505050505092915050565b6000610d4982611127565b808452602084019350610d5b836110f7565b60005b82811015610d8d57610d71868351610f14565b610d7a8261116d565b9150602086019550600181019050610d5e565b50849250505092915050565b6000610da482611132565b808452602084019350610db683611104565b60005b82811015610de857610dcc868351610f23565b610dd58261117a565b9150602086019550600181019050610db9565b50849250505092915050565b610dfd816111a7565b82525050565b6000610e0e82611148565b808452610e22816020860160208601611206565b610e2b81611239565b602085010191505092915050565b6000610e448261113d565b808452610e58816020860160208601611206565b610e6181611239565b602085010191505092915050565b6000601e82527f6f6e6c7920747261636520636f6e74726163742063616e20696e766f6b6500006020830152604082019050919050565b6000601882527f737461747573206d7573742062652070726f647563696e6700000000000000006020830152604082019050919050565b6000601a82527f737461747573206d757374206265206469737472696275746f720000000000006020830152604082019050919050565b610f1d816111b3565b82525050565b610f2c816111bd565b82525050565b60006080820190508181036000830152610f4c8187610d3e565b90508181036020830152610f608186610cd0565b90508181036040830152610f748185610c75565b90508181036060830152610f888184610d99565b905095945050505050565b6000602082019050610fa86000830184610df4565b92915050565b60006020820190508181036000830152610fc781610e6f565b9050919050565b60006020820190508181036000830152610fe781610ea6565b9050919050565b6000602082019050818103600083015261100781610edd565b9050919050565b600060c0820190506110236000830189610f14565b81810360208301526110358188610e03565b905081810360408301526110498187610e03565b9050818103606083015261105d8186610e03565b905061106c6080830185610c66565b61107960a0830184610f23565b979650505050505050565b6000604051905081810181811067ffffffffffffffff821117156110a757600080fd5b8060405250919050565b600067ffffffffffffffff8211156110c857600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015611224578082015181840152602081019050611209565b83811115611233576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582072c5513fbf9b68d1c47bfc41c1a9f0aee10da32ab6e8b674c32654fcad086b826c6578706572696d656e74616cf50037a265627a7a7230582014c89e2f9275f31a46bba6f3b5b17487fa345c46726aa64d7d92b80d0a477dbe6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"name\":\"getFood\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"traceNumber\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"},{\"name\":\"\",\"type\":\"uint8\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint8\"}],\"methodSignatureAsString\":\"getFood(uint256)\"},{\"name\":\"getTraceInfo\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"traceNumber\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256[]\"},{\"name\":\"\",\"type\":\"string[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string[]\"},{\"name\":\"\",\"type\":\"address[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address[]\"},{\"name\":\"\",\"type\":\"uint8[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint8[]\"}],\"methodSignatureAsString\":\"getTraceInfo(uint256)\"},{\"name\":\"newFood\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"name\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"traceNumber\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"traceName\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"quality\",\"type\":\"uint8\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"methodSignatureAsString\":\"newFood(string,uint256,string,uint8)\"},{\"name\":\"addTraceInfoByDistributor\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"traceNumber\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"traceName\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"quality\",\"type\":\"uint8\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"indexed\":false,\"components\":null,\"typeAsString\":\"bool\"}],\"methodSignatureAsString\":\"addTraceInfoByDistributor(uint256,string,uint8)\"},{\"name\":\"isRetailer\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"indexed\":false,\"components\":null,\"typeAsString\":\"bool\"}],\"methodSignatureAsString\":\"isRetailer(address)\"},{\"name\":\"renounceDistributor\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"methodSignatureAsString\":\"renounceDistributor()\"},{\"name\":\"getAllFood\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256[]\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256[]\"}],\"methodSignatureAsString\":\"getAllFood()\"},{\"name\":\"addDistributor\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[],\"methodSignatureAsString\":\"addDistributor(address)\"},{\"name\":\"addRetailer\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[],\"methodSignatureAsString\":\"addRetailer(address)\"},{\"name\":\"isDistributor\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"indexed\":false,\"components\":null,\"typeAsString\":\"bool\"}],\"methodSignatureAsString\":\"isDistributor(address)\"},{\"name\":\"addTraceInfoByRetailer\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"traceNumber\",\"type\":\"uint256\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint256\"},{\"name\":\"traceName\",\"type\":\"string\",\"indexed\":false,\"components\":null,\"typeAsString\":\"string\"},{\"name\":\"quality\",\"type\":\"uint8\",\"indexed\":false,\"components\":null,\"typeAsString\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"indexed\":false,\"components\":null,\"typeAsString\":\"bool\"}],\"methodSignatureAsString\":\"addTraceInfoByRetailer(uint256,string,uint8)\"},{\"name\":\"renounceRetailer\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"methodSignatureAsString\":\"renounceRetailer()\"},{\"name\":\"addProducer\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[],\"methodSignatureAsString\":\"addProducer(address)\"},{\"name\":\"isProducer\",\"type\":\"function\",\"constant\":true,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"view\",\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"indexed\":false,\"components\":null,\"typeAsString\":\"bool\"}],\"methodSignatureAsString\":\"isProducer(address)\"},{\"name\":\"renounceProducer\",\"type\":\"function\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[],\"outputs\":[],\"methodSignatureAsString\":\"renounceProducer()\"},{\"name\":null,\"type\":\"constructor\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":\"nonpayable\",\"inputs\":[{\"name\":\"producer\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"},{\"name\":\"distributor\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"},{\"name\":\"retailer\",\"type\":\"address\",\"indexed\":false,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":null,\"methodSignatureAsString\":\"null(address,address,address)\"},{\"name\":\"RetailerAdded\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":null,\"methodSignatureAsString\":\"RetailerAdded(address)\"},{\"name\":\"RetailerRemoved\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":null,\"methodSignatureAsString\":\"RetailerRemoved(address)\"},{\"name\":\"DistributorAdded\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":null,\"methodSignatureAsString\":\"DistributorAdded(address)\"},{\"name\":\"DistributorRemoved\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":null,\"methodSignatureAsString\":\"DistributorRemoved(address)\"},{\"name\":\"ProducerAdded\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":null,\"methodSignatureAsString\":\"ProducerAdded(address)\"},{\"name\":\"ProducerRemoved\",\"type\":\"event\",\"constant\":false,\"payable\":false,\"anonymous","\":false,\"stateMutability\":null,\"inputs\":[{\"name\":\"account\",\"type\":\"address\",\"indexed\":true,\"components\":null,\"typeAsString\":\"address\"}],\"outputs\":null,\"methodSignatureAsString\":\"ProducerRemoved(address)\"}]"};

    public static final String ABI = org.fisco.bcos.sdk.utils.StringUtils.joinAll("", ABI_ARRAY);

    public static final String FUNC_GETFOOD = "getFood";

    public static final String FUNC_GETTRACEINFO = "getTraceInfo";

    public static final String FUNC_NEWFOOD = "newFood";

    public static final String FUNC_ADDTRACEINFOBYDISTRIBUTOR = "addTraceInfoByDistributor";

    public static final String FUNC_ISRETAILER = "isRetailer";

    public static final String FUNC_RENOUNCEDISTRIBUTOR = "renounceDistributor";

    public static final String FUNC_GETALLFOOD = "getAllFood";

    public static final String FUNC_ADDDISTRIBUTOR = "addDistributor";

    public static final String FUNC_ADDRETAILER = "addRetailer";

    public static final String FUNC_ISDISTRIBUTOR = "isDistributor";

    public static final String FUNC_ADDTRACEINFOBYRETAILER = "addTraceInfoByRetailer";

    public static final String FUNC_RENOUNCERETAILER = "renounceRetailer";

    public static final String FUNC_ADDPRODUCER = "addProducer";

    public static final String FUNC_ISPRODUCER = "isProducer";

    public static final String FUNC_RENOUNCEPRODUCER = "renounceProducer";

    public static final Event RETAILERADDED_EVENT = new Event("RetailerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event RETAILERREMOVED_EVENT = new Event("RetailerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event DISTRIBUTORADDED_EVENT = new Event("DistributorAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event DISTRIBUTORREMOVED_EVENT = new Event("DistributorRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event PRODUCERADDED_EVENT = new Event("ProducerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event PRODUCERREMOVED_EVENT = new Event("ProducerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    protected Trace(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public Tuple6<BigInteger, String, String, String, String, BigInteger> getFood(BigInteger traceNumber) throws ContractException {
        final Function function = new Function(FUNC_GETFOOD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple6<BigInteger, String, String, String, String, BigInteger>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (String) results.get(3).getValue(), 
                (String) results.get(4).getValue(), 
                (BigInteger) results.get(5).getValue());
    }

    public Tuple4<List<BigInteger>, List<String>, List<String>, List<BigInteger>> getTraceInfo(BigInteger traceNumber) throws ContractException {
        final Function function = new Function(FUNC_GETTRACEINFO, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Utf8String>>() {}, new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Uint8>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple4<List<BigInteger>, List<String>, List<String>, List<BigInteger>>(
                convertToNative((List<Uint256>) results.get(0).getValue()), 
                convertToNative((List<Utf8String>) results.get(1).getValue()), 
                convertToNative((List<Address>) results.get(2).getValue()), 
                convertToNative((List<Uint8>) results.get(3).getValue()));
    }

    public TransactionReceipt newFood(String name, BigInteger traceNumber, String traceName, BigInteger quality) {
        final Function function = new Function(
                FUNC_NEWFOOD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(traceName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(quality)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void newFood(String name, BigInteger traceNumber, String traceName, BigInteger quality, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_NEWFOOD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(traceName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(quality)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForNewFood(String name, BigInteger traceNumber, String traceName, BigInteger quality) {
        final Function function = new Function(
                FUNC_NEWFOOD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(traceName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(quality)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, String, BigInteger> getNewFoodInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_NEWFOOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (String) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple1<String> getNewFoodOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_NEWFOOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt addTraceInfoByDistributor(BigInteger traceNumber, String traceName, BigInteger quality) {
        final Function function = new Function(
                FUNC_ADDTRACEINFOBYDISTRIBUTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(traceName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(quality)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addTraceInfoByDistributor(BigInteger traceNumber, String traceName, BigInteger quality, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDTRACEINFOBYDISTRIBUTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(traceName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(quality)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddTraceInfoByDistributor(BigInteger traceNumber, String traceName, BigInteger quality) {
        final Function function = new Function(
                FUNC_ADDTRACEINFOBYDISTRIBUTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(traceName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(quality)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getAddTraceInfoByDistributorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDTRACEINFOBYDISTRIBUTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getAddTraceInfoByDistributorOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDTRACEINFOBYDISTRIBUTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Boolean isRetailer(String account) throws ContractException {
        final Function function = new Function(FUNC_ISRETAILER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt renounceDistributor() {
        final Function function = new Function(
                FUNC_RENOUNCEDISTRIBUTOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void renounceDistributor(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RENOUNCEDISTRIBUTOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRenounceDistributor() {
        final Function function = new Function(
                FUNC_RENOUNCEDISTRIBUTOR, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public List getAllFood() throws ContractException {
        final Function function = new Function(FUNC_GETALLFOOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt addDistributor(String account) {
        final Function function = new Function(
                FUNC_ADDDISTRIBUTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addDistributor(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDDISTRIBUTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddDistributor(String account) {
        final Function function = new Function(
                FUNC_ADDDISTRIBUTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddDistributorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDDISTRIBUTOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt addRetailer(String account) {
        final Function function = new Function(
                FUNC_ADDRETAILER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addRetailer(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDRETAILER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddRetailer(String account) {
        final Function function = new Function(
                FUNC_ADDRETAILER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddRetailerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDRETAILER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean isDistributor(String account) throws ContractException {
        final Function function = new Function(FUNC_ISDISTRIBUTOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt addTraceInfoByRetailer(BigInteger traceNumber, String traceName, BigInteger quality) {
        final Function function = new Function(
                FUNC_ADDTRACEINFOBYRETAILER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(traceName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(quality)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addTraceInfoByRetailer(BigInteger traceNumber, String traceName, BigInteger quality, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDTRACEINFOBYRETAILER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(traceName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(quality)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddTraceInfoByRetailer(BigInteger traceNumber, String traceName, BigInteger quality) {
        final Function function = new Function(
                FUNC_ADDTRACEINFOBYRETAILER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(traceNumber), 
                new org.fisco.bcos.sdk.abi.datatypes.Utf8String(traceName), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint8(quality)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<BigInteger, String, BigInteger> getAddTraceInfoByRetailerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDTRACEINFOBYRETAILER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint8>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<BigInteger, String, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getAddTraceInfoByRetailerOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDTRACEINFOBYRETAILER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt renounceRetailer() {
        final Function function = new Function(
                FUNC_RENOUNCERETAILER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void renounceRetailer(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RENOUNCERETAILER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRenounceRetailer() {
        final Function function = new Function(
                FUNC_RENOUNCERETAILER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public TransactionReceipt addProducer(String account) {
        final Function function = new Function(
                FUNC_ADDPRODUCER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addProducer(String account, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPRODUCER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddProducer(String account) {
        final Function function = new Function(
                FUNC_ADDPRODUCER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getAddProducerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPRODUCER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Boolean isProducer(String account) throws ContractException {
        final Function function = new Function(FUNC_ISPRODUCER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt renounceProducer() {
        final Function function = new Function(
                FUNC_RENOUNCEPRODUCER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void renounceProducer(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RENOUNCEPRODUCER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRenounceProducer() {
        final Function function = new Function(
                FUNC_RENOUNCEPRODUCER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public List<RetailerAddedEventResponse> getRetailerAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETAILERADDED_EVENT, transactionReceipt);
        ArrayList<RetailerAddedEventResponse> responses = new ArrayList<RetailerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RetailerAddedEventResponse typedResponse = new RetailerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRetailerAddedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(RETAILERADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRetailerAddedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(RETAILERADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RetailerRemovedEventResponse> getRetailerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETAILERREMOVED_EVENT, transactionReceipt);
        ArrayList<RetailerRemovedEventResponse> responses = new ArrayList<RetailerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RetailerRemovedEventResponse typedResponse = new RetailerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRetailerRemovedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(RETAILERREMOVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRetailerRemovedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(RETAILERREMOVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DistributorAddedEventResponse> getDistributorAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DISTRIBUTORADDED_EVENT, transactionReceipt);
        ArrayList<DistributorAddedEventResponse> responses = new ArrayList<DistributorAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DistributorAddedEventResponse typedResponse = new DistributorAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDistributorAddedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DISTRIBUTORADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDistributorAddedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DISTRIBUTORADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DistributorRemovedEventResponse> getDistributorRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DISTRIBUTORREMOVED_EVENT, transactionReceipt);
        ArrayList<DistributorRemovedEventResponse> responses = new ArrayList<DistributorRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DistributorRemovedEventResponse typedResponse = new DistributorRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDistributorRemovedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DISTRIBUTORREMOVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDistributorRemovedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DISTRIBUTORREMOVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ProducerAddedEventResponse> getProducerAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCERADDED_EVENT, transactionReceipt);
        ArrayList<ProducerAddedEventResponse> responses = new ArrayList<ProducerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProducerAddedEventResponse typedResponse = new ProducerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeProducerAddedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(PRODUCERADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeProducerAddedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(PRODUCERADDED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<ProducerRemovedEventResponse> getProducerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCERREMOVED_EVENT, transactionReceipt);
        ArrayList<ProducerRemovedEventResponse> responses = new ArrayList<ProducerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProducerRemovedEventResponse typedResponse = new ProducerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeProducerRemovedEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(PRODUCERREMOVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeProducerRemovedEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(PRODUCERREMOVED_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Trace load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Trace(contractAddress, client, credential);
    }

    public static Trace deploy(Client client, CryptoKeyPair credential, String producer, String distributor, String retailer) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(producer), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(distributor), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(retailer)));
        return deploy(Trace.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class RetailerAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class RetailerRemovedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class DistributorAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class DistributorRemovedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ProducerAddedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }

    public static class ProducerRemovedEventResponse {
        public TransactionReceipt.Logs log;

        public String account;
    }
}
